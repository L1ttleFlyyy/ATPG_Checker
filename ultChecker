#!/bin/bash

build_env ()
{
	rm -rf test
	mkdir test
	cp $SIM test
	cp ckt/*/*.ckt test
	cd test
}

stress_test ()
{
	build_env
	cp ../ckt/*/*_t0.txt .
	cp ../GOLD/pfs/*.flist .
	touch cmd.tmp
	for ckt in *.ckt; do
		[ -f "$ckt" ] || break
		name=`basename $ckt .ckt`
		tv=$name"_t0.txt"
		pfs_in=$name".flist"
		sim_out=$name"_t0_output.txt"
		dfs_out=$name"_t0_dfs.txt"
		pfs_out=$name"_t0_pfs.txt"
		echo "read $ckt" >> cmd.tmp
		echo "lev" >> cmd.tmp
		echo "logicsim $tv $sim_out" >> cmd.tmp
		echo "dfs $tv $dfs_out" >> cmd.tmp
		echo "pfs $tv $pfs_in $pfs_out" >> cmd.tmp
		#cp $output $goldenfile
	done
	echo quit >> cmd.tmp
	cat cmd.tmp 
	ret=0
	cat cmd.tmp | $SIM || ret=1
	echo
	if [ $ret -ne 0 ]; then
		echo "Stress test failed..." && return
	fi
	
	echo "Stress test passed! Press enter to compare results..."
	read
	for ckt in *.ckt; do
		[ -f "$ckt" ] || break
		name=`basename $ckt .ckt`
		sim_out=$name"_t0_output.txt"
		dfs_out=$name"_t0_dfs.txt"
		pfs_out=$name"_t0_pfs.txt"
		echo "compairing $name logicsim..."
		diff -q <(sort $sim_out) <(sort "../GOLD/logicsim/GOLD_"$sim_out)
		echo "compairing $name dfs..."
		diff -q <(sort $dfs_out) <(sort "../GOLD/dfs/GOLD_"$dfs_out)
		echo "compairing $name pfs..."
		diff -q <(sort $pfs_out) <(sort "../GOLD/pfs/GOLD_"$pfs_out)
		#cp $output $goldenfile
	done
	rm cmd.tmp
	cd ..

}

lev_test ()
{
	build_env
	test="lev"
	for ckt in *.ckt; do
		[ -f "$ckt" ] || break
		name=`basename $ckt .ckt`
		output=$name"_level.txt"
		goldenfile="../GOLD/$test/$output"
		echo "comparing $name ..."
		printf "read $ckt\nlev\nquit\n" | $SIM >> /dev/null
		diff -q <(sort $output) <(sort $goldenfile)
		#cp $output $goldenfile
	done
	cd ..
}

sim_test () 
{
	build_env
	test="logicsim"
	for ckt in *.ckt; do
		[ -f "$ckt" ] || break
		name=`basename $ckt .ckt`
		echo "checking $name, press any key to continue..."
		read
		for t in ../ckt/$name/*.txt; do
			[ -f "$t" ] || break
			tv=`basename $t`
			output=`basename $tv .txt`"_output.txt"
			goldenfile="../GOLD/$test/GOLD_$output"
			cp $t .
			printf "read $ckt\nlev\n$test $tv $output\nquit\n" | $SIM >> /dev/null
			echo "comparing $tv ..."
			diff -q <(sort $output) <(sort $goldenfile)
			#cp $output $goldenfile
			rm $tv
		done
		echo
	done
	cd ..
}

flr_test ()
{
	build_env
	test="flr"
	for ckt in *.ckt; do
		[ -f "$ckt" ] || break
		name=`basename $ckt .ckt`
		output=$name"_flr.txt"
		goldenfile="../GOLD/$test/$output"
		echo "comparing $name ..."
		printf "read $ckt\nlev\n$test $output\nquit\n" | $SIM >> /dev/null
		diff -q <(sort $output) <(sort $goldenfile)
		# cp $output $goldenfile
	done
	cd ..
}

flr2_test ()
{
	build_env
	test="flr2"
	for ckt in *.ckt; do
		[ -f "$ckt" ] || break
		name=`basename $ckt .ckt`
		output=$name"_flr2.txt"
		goldenfile="../GOLD/$test/$output"
		printf "read $ckt\nlev\n$test $output\nquit\n" | $SIM >> /dev/null
		count1=`cat $output | wc -l`
		count2=`cat $goldenfile | wc -l`
		[ "$count1" == "$count2" ] || echo "$name flr2 differs!!!" 
		# cp $output $goldenfile
	done
	cd ..
}

dfs_test ()
{
	build_env
	test="dfs"
	for ckt in *.ckt; do
		[ -f "$ckt" ] || break
		name=`basename $ckt .ckt`
		echo "checking $name, press any key to continue..."
		read
		for t in ../ckt/$name/*.txt; do
			[ -f "$t" ] || break
			tv=`basename $t`
			output=`basename $tv .txt`"_dfs.txt"
			goldenfile="../GOLD/$test/GOLD_$output"
			cp $t .
			printf "read $ckt\nlev\n$test $tv $output\nquit\n" | $SIM >> /dev/null
			echo "comparing $tv ..."
			diff -q <(sort $output) <(sort $goldenfile)
			# cp $output $goldenfile
			rm $tv
		done
		echo
	done
	cd ..
}

pfs_test ()
{
	build_env
	test="pfs"
	for ckt in *.ckt; do
		[ -f "$ckt" ] || break
		name=`basename $ckt .ckt`
		flist="$name.flist"
		cp "../GOLD/pfs/$flist" .
		echo "checking $name, press any key to continue..."
		read
		for t in ../ckt/$name/*.txt; do
			[ -f "$t" ] || break
			tv=`basename $t`
			output=`basename $tv .txt`"_pfs.txt"
			goldenfile="../GOLD/$test/GOLD_$output"
			cp $t .
			printf "read $ckt\nlev\n$test $tv $flist $output\nquit\n" | $SIM >> /dev/null
			echo "comparing $tv ..."
			diff -q <(sort $output) <(sort $goldenfile)
			# cp $output $goldenfile
			rm $tv
		done
		echo
		rm $flist
	done
	cd ..
}

SIM="./simulator"
if [ ! -f "$SIM" ]; then
	echo "please copy your simulator here..."
	exit 1
fi

echo "select: lev sim flr flr2 dfs pfs stress"
read INPUT_STRING
case $INPUT_STRING in
	lev)
		lev_test
		;;
	sim)
		sim_test
		;;
	flr)
		flr_test
		;;
	flr2)
		flr2_test
		;;
	dfs)
		dfs_test
		;;
	pfs)
		pfs_test
		;;
	stress)
		stress_test
		;;
	*)
		echo "Sorry, I don't understand"
		;;
esac
echo 
